using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace HostAppInPanelLib.Utility
{
    public class SeleniumUtility
    {
        public static IWebDriver GetChromeDriverHidden(out ChromeDriverService chromeDriverService)
        {
            chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.HideCommandPromptWindow = true;
            var options = new ChromeOptions();
            options.AddArgument("--disable-infobars");
            options.AddArgument("--start-minimized");
            return new ChromeDriver(chromeDriverService, options);
        }

        public static List<Process> GetSeleniumProcesses(ChromeDriverService chromeDriverService)
        {
            //create list of process id
            var driverProcessIds = new List<Process>();

            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new ManagementObjectSearcher(
                $"Select * From Win32_Process Where ParentProcessID={chromeDriverService.ProcessId}");
            driverProcessIds.Add(Process.GetProcessById(chromeDriverService.ProcessId));
            foreach (var mo in mos.Get())
            {
                var pid = Convert.ToInt32(mo["ProcessID"]);
                var processById = Process.GetProcessById(pid);
                driverProcessIds.Add(processById);
            }
            return driverProcessIds;
        }
        public static List<Process> GetChromeProcesses(ChromeDriverService chromeDriverService)
        {
            //create list of process id
            var driverProcessIds = GetSeleniumProcesses(chromeDriverService).Where(p => p.ProcessName.ToLower() == "chrome").ToList();

            return driverProcessIds;
        }
    }
}